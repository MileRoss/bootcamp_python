-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

-- 1. List the number of films per category.
SELECT 
name AS category,
COUNT(*) AS number_of_films
FROM sakila.category
JOIN sakila.film_category USING (category_id)
GROUP BY category;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT store_id, city, country
FROM store
JOIN address USING (address_id)
JOIN city USING (city_id)
JOIN country USING (country_id);

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT 
store_id,
SUM(amount) AS total_revenue
FROM sakila.staff AS s
JOIN sakila.payment USING (staff_id)
GROUP BY store_id;

-- Bonus:

-- 4. Identify the film categories with the longest average running time.
SELECT
name AS category,
AVG(length) AS average_running_time
FROM sakila.category AS c
JOIN sakila.film_category USING (category_id)
JOIN sakila.film USING (film_id)
GROUP BY category
ORDER BY average_running_time DESC;

-- 5. Display the top 10 most frequently rented movies in descending order.
SELECT
title,
COUNT(inventory_id) AS rental_count
FROM sakila.film AS f
JOIN sakila.inventory USING (film_id)
JOIN sakila.rental USING (inventory_id)
GROUP BY title
ORDER BY rental_count DESC
LIMIT 10;

-- 6. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT
DISTINCT(title),
inventory_id
FROM sakila.film AS f
JOIN sakila.inventory USING (film_id)
LEFT JOIN sakila.rental USING (inventory_id)
JOIN sakila.store AS s USING (store_id)
WHERE title = 'Academy Dinosaur' 
AND s.store_id = 1
AND return_date IS NULL;

-- 7. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT
sakila.film.title,
COUNT(sakila.inventory.film_id) AS copies,
CASE
WHEN IFNULL(inventory.film_id, 'NOT available') = 'NOT available' THEN 'NOT available'
ELSE 'Available'
END AS status
FROM sakila.film
LEFT JOIN sakila.inventory USING (film_id)
GROUP BY film_id;

-- Mile's comment: the query above is as per the task request.
-- However, it seems redundant to use IFNULL with CASE, so the query below is the way I'd do it.
SELECT
sakila.film.title,
COUNT(sakila.inventory.film_id) AS copies,
CASE
WHEN ISNULL(inventory.film_id) THEN 'NOT available'
ELSE 'Available'
END AS status
FROM sakila.film
LEFT JOIN sakila.inventory USING (film_id)
GROUP BY film_id;

/*
Tips to help you successfully complete the lab:

This lab involves joins with multiple tables, which can be challenging. 
Take your time and follow the steps we discussed in class:
- Make sure you understand the relationships between the tables in the database. 
This will help you determine which tables to join and which columns to use in your joins.

- Identify a common column for both tables to use in the ON section of the join. 
If there isn't a common column, you may need to add another table with a common column.

- Decide which table you want to use as the left table (immediately after FROM) 
and which will be the right table (immediately after JOIN).

- Determine which table you want to include all records from. 
This will help you decide which type of JOIN to use. 
If you want all records from the first table, use a LEFT JOIN. 
If you want all records from the second table, use a RIGHT JOIN. 
If you want records from both tables only where there is a match, use an INNER JOIN.

- Use table aliases to make your queries easier to read and understand. 
This is especially important when working with multiple tables.
*/